#!/bin/bash

set -o pipefail

#start_time=$(date +"%s.%N")

assert() {
    if [ $# -gt 0 ]; then stdout_log "ASSERT: ${1}"; fi
    if [[ -f ${log_file} ]]; then
        echo -e "\n\n"
	echo ""
	echo "Installation failed, Here are the last 10 lines from the log"
	echo "The full installation log is available at ${log_file}"
	echo "If more information is needed re-run the install with --debug"
	echo "$(tail ${log_file})"
    else
	echo "Installation failed prior to log file being created"
	echo "Try re-running with --debug"
	echo "Installation instructions: https://docs.platform9.com/kubernetes/PMK-CLI/#installation"
    fi
    exit 1
}

debugging() {

    #removed the checks as they were creating errors on MAC
	output="$(date +"%T"):$(basename $0) : ${1}"

    if [ -f "${log_file}" ]; then
	echo "${output}" 2>&1 >> ${log_file}
    fi
    echo "${output}"
}

stdout_log() {
    echo "$1"
    debugging "$1"
}

initialize_basedir() {
    debugging "Initializing: ${pf9_basedir}"
    for dir in ${pf9_state_dirs}; do
	debugging "Ensuring ${dir} exists"
        if ! mkdir -p "${dir}" > /dev/null 2>&1; then assert "Failed to create directory: ${dir}"; fi
    done
    debugging "Ensuring ${log_file} exists"
    if ! mkdir -p "${dir}" > /dev/null 2>&1; then assert "Failed to create directory: ${dir}"; fi
    if ! touch "${log_file}" > /dev/null 2>&1; then assert "failed to create log file: ${log_file}"; fi
}

refresh_symlink() {
    # Create symlink in /usr/bin
    
    if [ -L ${symlink_path} ]; then
	if ! (sudo rm ${symlink_path} >> ${log_file} 2>&1); then
		assert "Failed to remove existing symlink: ${symlink_path}"; fi
	fi
    if ! (sudo ln -s ${cli_exec} ${symlink_path} >> ${log_file} 2>&1); then
	    assert "Failed to create Platform9 CLI symlink in /usr/bin"; fi
}

check_installation() {
    if ! (${cli_exec} --help >> ${log_file} 2>&1); then
	assert "Installation of Platform9 CLI Failed"; fi
}

download_cli_binary() {
	echo "Note: SUDO access required to run Platform9 CLI."
    echo "      You might be prompted for your SUDO password."
	echo ""
	echo "Downloading Platform9 CLI binary..."
	sudo rm ${cli_exec} 2> /dev/null
	cd ${pf9_bin} > /dev/null && sudo curl -s -O ${cli_path} -o ${log_file} 2>&1 && cd - > /dev/null
	sudo chmod 555 ${cli_exec}
	echo ""
	echo "Platform9 CLI binary downloaded."
	echo ""
}

download_cli_binary_windows(){
    echo "Downloading Platform9 CLI binary..."
    curl -s -O ${cli_path} -o pf9cp.log
    Ren "${os}${cpu}" "${os}${cpu}.exe"
    echo ""
	echo "Platform9 CLI binary downloaded."
	echo ""
}


print_pf9_logo() {
cat << "EOF" 
 ____  _       _    __                      ___
|  _ \| | __ _| |_ / _| ___  _ __ _ __ ___ / _ \
| |_) | |/ _` | __| |_ / _ \| '__| '_ ` _ \ (_) |
|  __/| | (_| | |_|  _| (_) | |  | | | | | \__, |
|_|   |_|\__,_|\__|_|  \___/|_|  |_| |_| |_| /_/

EOF
}

set_os_cpu(){

    os=""
    cpu=""
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            os="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
            os="mac"
            symlink_path="/usr/local/bin/pf9cp"
            return
    elif [[ "$OSTYPE" == "msys"* ]]; then
            os="win"
    fi

    arch=$(uname -i)

    if [ "$arch" == 'x86_64' ];then 
        cpu="64"
    elif [[ "$arch" == 'x86_32' ]]; then
        cpu="32"
    fi

}

##main

symlink_path="/usr/bin/pf9cp"
pf9_basedir=$(dirname ~/pf9/.)
log_file=${pf9_basedir}/log/cli_install.log
pf9_bin=${pf9_basedir}/bin
pf9_state_dirs="${pf9_bin} ${pf9_basedir}/db ${pf9_basedir}/log"
set_os_cpu
cli_path="https://pmkft-assets.s3.us-west-1.amazonaws.com/IAM_Checker/pf9cp-${os}${cpu}"
cli_exec="${pf9_bin}/pf9cp-${os}${cpu}"

print_pf9_logo
initialize_basedir

if [[ ${os} == "win"* ]]; then
    download_cli_binary_windows
    echo "Installing Platform9 CLI..."
    echo ""
else
    download_cli_binary
    echo "Installing Platform9 CLI..."
    echo ""
    refresh_symlink
    check_installation
fi



debugging "Platform9 CLI installation completed successfully."
echo "Platform9 CLI installation completed successfully !"
echo ""
echo "To start testing providers type:"
echo "        pf9cp help"
echo ""
